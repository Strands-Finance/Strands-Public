/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AccountNFTBookKeeperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_checkExpectedNAV"
      | "acceptOwnership"
      | "acceptableMarginOfError"
      | "accountNFT"
      | "accountTokenId"
      | "checkExpectedNAV"
      | "getAUM"
      | "getLastKnownAUM"
      | "getLastKnownNAV"
      | "getNAV"
      | "updateValueOutsideRepository18"
      | "init"
      | "isCapReached"
      | "lastKnownAUM"
      | "lastKnownNAV18"
      | "lastKnownTimestamp"
      | "markValueOutsideRepositorySettled"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "owner"
      | "repository"
      | "setAcceptableMarginOfError"
      | "setAccountNFT"
      | "valueOutsideRepository18"
      | "valueOutsideRepositorySettled"
      | "valueStaleTimestamp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AUMUpdated"
      | "NAVUpdated"
      | "OwnerChanged"
      | "OwnerNominated"
      | "valueOutsideRepositoryUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_checkExpectedNAV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptableMarginOfError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkExpectedNAV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAUM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastKnownAUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastKnownNAV",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNAV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateValueOutsideRepository18",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isCapReached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastKnownAUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastKnownNAV18",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastKnownTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markValueOutsideRepositorySettled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repository",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAcceptableMarginOfError",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOutsideRepository18",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valueOutsideRepositorySettled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valueStaleTimestamp",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_checkExpectedNAV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptableMarginOfError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accountNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkExpectedNAV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAUM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastKnownAUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastKnownNAV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNAV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateValueOutsideRepository18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCapReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastKnownAUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastKnownNAV18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastKnownTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markValueOutsideRepositorySettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repository", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptableMarginOfError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOutsideRepository18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOutsideRepositorySettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueStaleTimestamp",
    data: BytesLike
  ): Result;
}

export namespace AUMUpdatedEvent {
  export type InputTuple = [
    value: BigNumberish,
    timestamp: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [value: bigint, timestamp: bigint, owner: string];
  export interface OutputObject {
    value: bigint;
    timestamp: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NAVUpdatedEvent {
  export type InputTuple = [
    value: BigNumberish,
    timestamp: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [value: bigint, timestamp: bigint, owner: string];
  export interface OutputObject {
    value: bigint;
    timestamp: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerNominatedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace valueOutsideRepositoryUpdatedEvent {
  export type InputTuple = [
    value: BigNumberish,
    timestamp: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [value: bigint, timestamp: bigint, owner: string];
  export interface OutputObject {
    value: bigint;
    timestamp: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccountNFTBookKeeper extends BaseContract {
  connect(runner?: ContractRunner | null): AccountNFTBookKeeper;
  waitForDeployment(): Promise<this>;

  interface: AccountNFTBookKeeperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _checkExpectedNAV: TypedContractMethod<
    [expectedNAV: BigNumberish],
    [void],
    "view"
  >;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  acceptableMarginOfError: TypedContractMethod<[], [bigint], "view">;

  accountNFT: TypedContractMethod<[], [string], "view">;

  accountTokenId: TypedContractMethod<[], [bigint], "view">;

  checkExpectedNAV: TypedContractMethod<
    [expectedNAV: BigNumberish],
    [void],
    "view"
  >;

  getAUM: TypedContractMethod<[], [bigint], "view">;

  getLastKnownAUM: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getLastKnownNAV: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getNAV: TypedContractMethod<[], [bigint], "view">;

  updateValueOutsideRepository18: TypedContractMethod<
    [validFor: BigNumberish, expectedNAV: BigNumberish],
    [void],
    "nonpayable"
  >;

  init: TypedContractMethod<[_repository: AddressLike], [void], "nonpayable">;

  isCapReached: TypedContractMethod<[], [boolean], "view">;

  lastKnownAUM: TypedContractMethod<[], [bigint], "view">;

  lastKnownNAV18: TypedContractMethod<[], [bigint], "view">;

  lastKnownTimestamp: TypedContractMethod<[], [bigint], "view">;

  markValueOutsideRepositorySettled: TypedContractMethod<
    [_valueOutsideRepositorySettled: boolean],
    [void],
    "nonpayable"
  >;

  nominateNewOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  repository: TypedContractMethod<[], [string], "view">;

  setAcceptableMarginOfError: TypedContractMethod<
    [_marginOfError: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAccountNFT: TypedContractMethod<
    [_accountNFT: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  valueOutsideRepository18: TypedContractMethod<[], [bigint], "view">;

  valueOutsideRepositorySettled: TypedContractMethod<[], [boolean], "view">;

  valueStaleTimestamp: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_checkExpectedNAV"
  ): TypedContractMethod<[expectedNAV: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptableMarginOfError"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkExpectedNAV"
  ): TypedContractMethod<[expectedNAV: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "getAUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastKnownAUM"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getLastKnownNAV"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getNAV"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateValueOutsideRepository18"
  ): TypedContractMethod<
    [validFor: BigNumberish, expectedNAV: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[_repository: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isCapReached"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastKnownAUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastKnownNAV18"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastKnownTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "markValueOutsideRepositorySettled"
  ): TypedContractMethod<
    [_valueOutsideRepositorySettled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nominateNewOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repository"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAcceptableMarginOfError"
  ): TypedContractMethod<[_marginOfError: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAccountNFT"
  ): TypedContractMethod<
    [_accountNFT: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "valueOutsideRepository18"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "valueOutsideRepositorySettled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "valueStaleTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AUMUpdated"
  ): TypedContractEvent<
    AUMUpdatedEvent.InputTuple,
    AUMUpdatedEvent.OutputTuple,
    AUMUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NAVUpdated"
  ): TypedContractEvent<
    NAVUpdatedEvent.InputTuple,
    NAVUpdatedEvent.OutputTuple,
    NAVUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerNominated"
  ): TypedContractEvent<
    OwnerNominatedEvent.InputTuple,
    OwnerNominatedEvent.OutputTuple,
    OwnerNominatedEvent.OutputObject
  >;
  getEvent(
    key: "valueOutsideRepositoryUpdated"
  ): TypedContractEvent<
    valueOutsideRepositoryUpdatedEvent.InputTuple,
    valueOutsideRepositoryUpdatedEvent.OutputTuple,
    valueOutsideRepositoryUpdatedEvent.OutputObject
  >;

  filters: {
    "AUMUpdated(uint256,uint256,address)": TypedContractEvent<
      AUMUpdatedEvent.InputTuple,
      AUMUpdatedEvent.OutputTuple,
      AUMUpdatedEvent.OutputObject
    >;
    AUMUpdated: TypedContractEvent<
      AUMUpdatedEvent.InputTuple,
      AUMUpdatedEvent.OutputTuple,
      AUMUpdatedEvent.OutputObject
    >;

    "NAVUpdated(uint256,uint256,address)": TypedContractEvent<
      NAVUpdatedEvent.InputTuple,
      NAVUpdatedEvent.OutputTuple,
      NAVUpdatedEvent.OutputObject
    >;
    NAVUpdated: TypedContractEvent<
      NAVUpdatedEvent.InputTuple,
      NAVUpdatedEvent.OutputTuple,
      NAVUpdatedEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "OwnerNominated(address)": TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
    OwnerNominated: TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;

    "valueOutsideRepositoryUpdated(uint256,uint256,address)": TypedContractEvent<
      valueOutsideRepositoryUpdatedEvent.InputTuple,
      valueOutsideRepositoryUpdatedEvent.OutputTuple,
      valueOutsideRepositoryUpdatedEvent.OutputObject
    >;
    valueOutsideRepositoryUpdated: TypedContractEvent<
      valueOutsideRepositoryUpdatedEvent.InputTuple,
      valueOutsideRepositoryUpdatedEvent.OutputTuple,
      valueOutsideRepositoryUpdatedEvent.OutputObject
    >;
  };
}
