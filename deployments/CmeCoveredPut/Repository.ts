/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RepositoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "YEAR_IN_SECOND"
      | "acceptOwnership"
      | "bookKeeper"
      | "collectLicensingFee"
      | "controllers"
      | "depositAsset"
      | "depositEnabled"
      | "depositHead"
      | "depositHeadToProcess"
      | "depositQueue"
      | "executor"
      | "gateKeeper"
      | "getAUM"
      | "getLastKnownAUM"
      | "getLastKnownNAV"
      | "getLicenseFeeAccrued"
      | "getNAV"
      | "getOwnerAddress"
      | "getRepositoryToken"
      | "initiateDeposit"
      | "initiateDepositEth"
      | "initiateWithdraw"
      | "initiateWithdrawAllFor"
      | "isController"
      | "licensingFeeRate"
      | "moveFundsFromExecutor"
      | "moveFundsToExecutor"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "offChainDeposit18"
      | "offChainWithdraw"
      | "owner"
      | "processDeposits"
      | "processWithdrawals"
      | "removeDepositFromQueue"
      | "removeWithdrawalFromQueue"
      | "repositoryFactory"
      | "repositoryToken"
      | "setBookKeeper"
      | "setDepositEnabled"
      | "setExecutor"
      | "setGateKeeper"
      | "setIsController"
      | "setLicensingFeeRate"
      | "setTotalValueCap"
      | "setWithdrawEnabled"
      | "totalQueuedDeposits"
      | "totalQueuedWithdrawals"
      | "totalValueCap"
      | "updateRepositoryTokenName"
      | "userQueue"
      | "withdrawEnabled"
      | "withdrawHead"
      | "withdrawHeadToProcess"
      | "withdrawQueue"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ControllerSet"
      | "DepositProcessed"
      | "DepositQueued"
      | "ExecutorChanged"
      | "FundsAddedFromExecutor"
      | "FundsRemovedFromPool"
      | "LicensingFeeCollected"
      | "LicensingFeeRateSet"
      | "OffChainDepositProcessed"
      | "OffChainWithdrawalProcessed"
      | "OwnerChanged"
      | "OwnerNominated"
      | "WithdrawQueued"
      | "WithdrawalProcessed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "YEAR_IN_SECOND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bookKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectLicensingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositHeadToProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gateKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAUM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastKnownAUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastKnownNAV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseFeeAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNAV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOwnerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRepositoryToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateDepositEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdrawAllFor",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "licensingFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveFundsFromExecutor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moveFundsToExecutor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offChainDeposit18",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "offChainWithdraw",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDepositFromQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWithdrawalFromQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repositoryFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repositoryToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBookKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGateKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsController",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLicensingFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalValueCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRepositoryTokenName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userQueue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawHeadToProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQueue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "YEAR_IN_SECOND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bookKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectLicensingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositHeadToProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAUM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastKnownAUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastKnownNAV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseFeeAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNAV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepositoryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateDepositEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdrawAllFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licensingFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveFundsFromExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveFundsToExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offChainDeposit18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offChainWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDepositFromQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWithdrawalFromQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repositoryFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repositoryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBookKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGateKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLicensingFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalValueCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRepositoryTokenName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userQueue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawHeadToProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQueue",
    data: BytesLike
  ): Result;
}

export namespace ControllerSetEvent {
  export type InputTuple = [controller: AddressLike, isController: boolean];
  export type OutputTuple = [controller: string, isController: boolean];
  export interface OutputObject {
    controller: string;
    isController: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositProcessedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    depositQueueId: BigNumberish,
    amount: BigNumberish,
    nav18: BigNumberish,
    tokenMinted: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    depositQueueId: bigint,
    amount: bigint,
    nav18: bigint,
    tokenMinted: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    recipient: string;
    depositQueueId: bigint;
    amount: bigint;
    nav18: bigint;
    tokenMinted: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositQueuedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorChangedEvent {
  export type InputTuple = [executor: AddressLike];
  export type OutputTuple = [executor: string];
  export interface OutputObject {
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsAddedFromExecutorEvent {
  export type InputTuple = [
    caller: AddressLike,
    executor: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    executor: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    caller: string;
    executor: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsRemovedFromPoolEvent {
  export type InputTuple = [
    caller: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    recipient: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    caller: string;
    recipient: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicensingFeeCollectedEvent {
  export type InputTuple = [
    caller: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [caller: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    caller: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicensingFeeRateSetEvent {
  export type InputTuple = [newRate: BigNumberish];
  export type OutputTuple = [newRate: bigint];
  export interface OutputObject {
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OffChainDepositProcessedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    nav18: BigNumberish,
    tokenMinted: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    nav18: bigint,
    tokenMinted: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    nav18: bigint;
    tokenMinted: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OffChainWithdrawalProcessedEvent {
  export type InputTuple = [
    caller: AddressLike,
    recipient: AddressLike,
    tokenBurned: BigNumberish,
    nav18: BigNumberish,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    recipient: string,
    tokenBurned: bigint,
    nav18: bigint,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    caller: string;
    recipient: string;
    tokenBurned: bigint;
    nav18: bigint;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerNominatedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawQueuedEvent {
  export type InputTuple = [
    caller: AddressLike,
    recipient: AddressLike,
    withdrawQueueId: BigNumberish,
    tokenAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    recipient: string,
    withdrawQueueId: bigint,
    tokenAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    caller: string;
    recipient: string;
    withdrawQueueId: bigint;
    tokenAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalProcessedEvent {
  export type InputTuple = [
    caller: AddressLike,
    recipient: AddressLike,
    withdrawQueueId: BigNumberish,
    tokenBurned: BigNumberish,
    nav18: BigNumberish,
    amountReceived: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    recipient: string,
    withdrawQueueId: bigint,
    tokenBurned: bigint,
    nav18: bigint,
    amountReceived: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    caller: string;
    recipient: string;
    withdrawQueueId: bigint;
    tokenBurned: bigint;
    nav18: bigint;
    amountReceived: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Repository extends BaseContract {
  connect(runner?: ContractRunner | null): Repository;
  waitForDeployment(): Promise<this>;

  interface: RepositoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  YEAR_IN_SECOND: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  bookKeeper: TypedContractMethod<[], [string], "view">;

  collectLicensingFee: TypedContractMethod<[], [void], "nonpayable">;

  controllers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  depositAsset: TypedContractMethod<[], [string], "view">;

  depositEnabled: TypedContractMethod<[], [boolean], "view">;

  depositHead: TypedContractMethod<[], [bigint], "view">;

  depositHeadToProcess: TypedContractMethod<[], [bigint], "view">;

  depositQueue: TypedContractMethod<
    [depositId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        recipient: string;
        amount: bigint;
        depositInitiatedTime: bigint;
        isCancelled: boolean;
      }
    ],
    "view"
  >;

  executor: TypedContractMethod<[], [string], "view">;

  gateKeeper: TypedContractMethod<[], [string], "view">;

  getAUM: TypedContractMethod<[], [bigint], "view">;

  getLastKnownAUM: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getLastKnownNAV: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getLicenseFeeAccrued: TypedContractMethod<[], [bigint], "view">;

  getNAV: TypedContractMethod<[], [bigint], "view">;

  getOwnerAddress: TypedContractMethod<[], [string], "view">;

  getRepositoryToken: TypedContractMethod<[], [string], "view">;

  initiateDeposit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initiateDepositEth: TypedContractMethod<[], [void], "payable">;

  initiateWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initiateWithdrawAllFor: TypedContractMethod<
    [refundAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  isController: TypedContractMethod<
    [_controller: AddressLike],
    [boolean],
    "view"
  >;

  licensingFeeRate: TypedContractMethod<[], [bigint], "view">;

  moveFundsFromExecutor: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  moveFundsToExecutor: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  nominateNewOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedOwner: TypedContractMethod<[], [string], "view">;

  offChainDeposit18: TypedContractMethod<
    [amount18: BigNumberish, nav: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  offChainWithdraw: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      nav: BigNumberish,
      custodialWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  processDeposits: TypedContractMethod<
    [limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  processWithdrawals: TypedContractMethod<
    [limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeDepositFromQueue: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeWithdrawalFromQueue: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  repositoryFactory: TypedContractMethod<[], [string], "view">;

  repositoryToken: TypedContractMethod<[], [string], "view">;

  setBookKeeper: TypedContractMethod<
    [_bookKeeper: AddressLike],
    [void],
    "nonpayable"
  >;

  setDepositEnabled: TypedContractMethod<
    [_depositEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setExecutor: TypedContractMethod<
    [_executor: AddressLike],
    [void],
    "nonpayable"
  >;

  setGateKeeper: TypedContractMethod<
    [_gateKeeper: AddressLike],
    [void],
    "nonpayable"
  >;

  setIsController: TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;

  setLicensingFeeRate: TypedContractMethod<
    [_licensingFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTotalValueCap: TypedContractMethod<
    [_totalValueCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawEnabled: TypedContractMethod<
    [_withdrawEnabled: boolean],
    [void],
    "nonpayable"
  >;

  totalQueuedDeposits: TypedContractMethod<[], [bigint], "view">;

  totalQueuedWithdrawals: TypedContractMethod<[], [bigint], "view">;

  totalValueCap: TypedContractMethod<[], [bigint], "view">;

  updateRepositoryTokenName: TypedContractMethod<
    [_newName: string],
    [void],
    "nonpayable"
  >;

  userQueue: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { depositAmount: bigint; withdrawalAmount: bigint }],
    "view"
  >;

  withdrawEnabled: TypedContractMethod<[], [boolean], "view">;

  withdrawHead: TypedContractMethod<[], [bigint], "view">;

  withdrawHeadToProcess: TypedContractMethod<[], [bigint], "view">;

  withdrawQueue: TypedContractMethod<
    [withdrawalId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        recipient: string;
        tokenAmount: bigint;
        withdrawInitiatedTime: bigint;
        isCancelled: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "YEAR_IN_SECOND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bookKeeper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectLicensingFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "controllers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "depositAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "depositHead"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositHeadToProcess"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositQueue"
  ): TypedContractMethod<
    [depositId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        recipient: string;
        amount: bigint;
        depositInitiatedTime: bigint;
        isCancelled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gateKeeper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastKnownAUM"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getLastKnownNAV"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getLicenseFeeAccrued"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNAV"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwnerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRepositoryToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initiateDeposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initiateDepositEth"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "initiateWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initiateWithdrawAllFor"
  ): TypedContractMethod<
    [refundAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isController"
  ): TypedContractMethod<[_controller: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "licensingFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "moveFundsFromExecutor"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "moveFundsToExecutor"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominateNewOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "offChainDeposit18"
  ): TypedContractMethod<
    [amount18: BigNumberish, nav: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "offChainWithdraw"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      nav: BigNumberish,
      custodialWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processDeposits"
  ): TypedContractMethod<[limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "processWithdrawals"
  ): TypedContractMethod<[limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeDepositFromQueue"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWithdrawalFromQueue"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repositoryFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repositoryToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBookKeeper"
  ): TypedContractMethod<[_bookKeeper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDepositEnabled"
  ): TypedContractMethod<[_depositEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExecutor"
  ): TypedContractMethod<[_executor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGateKeeper"
  ): TypedContractMethod<[_gateKeeper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsController"
  ): TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLicensingFeeRate"
  ): TypedContractMethod<
    [_licensingFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTotalValueCap"
  ): TypedContractMethod<[_totalValueCap: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawEnabled"
  ): TypedContractMethod<[_withdrawEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalQueuedDeposits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalQueuedWithdrawals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalValueCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateRepositoryTokenName"
  ): TypedContractMethod<[_newName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userQueue"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { depositAmount: bigint; withdrawalAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawHead"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawHeadToProcess"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawQueue"
  ): TypedContractMethod<
    [withdrawalId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        recipient: string;
        tokenAmount: bigint;
        withdrawInitiatedTime: bigint;
        isCancelled: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ControllerSet"
  ): TypedContractEvent<
    ControllerSetEvent.InputTuple,
    ControllerSetEvent.OutputTuple,
    ControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "DepositProcessed"
  ): TypedContractEvent<
    DepositProcessedEvent.InputTuple,
    DepositProcessedEvent.OutputTuple,
    DepositProcessedEvent.OutputObject
  >;
  getEvent(
    key: "DepositQueued"
  ): TypedContractEvent<
    DepositQueuedEvent.InputTuple,
    DepositQueuedEvent.OutputTuple,
    DepositQueuedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorChanged"
  ): TypedContractEvent<
    ExecutorChangedEvent.InputTuple,
    ExecutorChangedEvent.OutputTuple,
    ExecutorChangedEvent.OutputObject
  >;
  getEvent(
    key: "FundsAddedFromExecutor"
  ): TypedContractEvent<
    FundsAddedFromExecutorEvent.InputTuple,
    FundsAddedFromExecutorEvent.OutputTuple,
    FundsAddedFromExecutorEvent.OutputObject
  >;
  getEvent(
    key: "FundsRemovedFromPool"
  ): TypedContractEvent<
    FundsRemovedFromPoolEvent.InputTuple,
    FundsRemovedFromPoolEvent.OutputTuple,
    FundsRemovedFromPoolEvent.OutputObject
  >;
  getEvent(
    key: "LicensingFeeCollected"
  ): TypedContractEvent<
    LicensingFeeCollectedEvent.InputTuple,
    LicensingFeeCollectedEvent.OutputTuple,
    LicensingFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "LicensingFeeRateSet"
  ): TypedContractEvent<
    LicensingFeeRateSetEvent.InputTuple,
    LicensingFeeRateSetEvent.OutputTuple,
    LicensingFeeRateSetEvent.OutputObject
  >;
  getEvent(
    key: "OffChainDepositProcessed"
  ): TypedContractEvent<
    OffChainDepositProcessedEvent.InputTuple,
    OffChainDepositProcessedEvent.OutputTuple,
    OffChainDepositProcessedEvent.OutputObject
  >;
  getEvent(
    key: "OffChainWithdrawalProcessed"
  ): TypedContractEvent<
    OffChainWithdrawalProcessedEvent.InputTuple,
    OffChainWithdrawalProcessedEvent.OutputTuple,
    OffChainWithdrawalProcessedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerNominated"
  ): TypedContractEvent<
    OwnerNominatedEvent.InputTuple,
    OwnerNominatedEvent.OutputTuple,
    OwnerNominatedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawQueued"
  ): TypedContractEvent<
    WithdrawQueuedEvent.InputTuple,
    WithdrawQueuedEvent.OutputTuple,
    WithdrawQueuedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalProcessed"
  ): TypedContractEvent<
    WithdrawalProcessedEvent.InputTuple,
    WithdrawalProcessedEvent.OutputTuple,
    WithdrawalProcessedEvent.OutputObject
  >;

  filters: {
    "ControllerSet(address,bool)": TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;
    ControllerSet: TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;

    "DepositProcessed(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      DepositProcessedEvent.InputTuple,
      DepositProcessedEvent.OutputTuple,
      DepositProcessedEvent.OutputObject
    >;
    DepositProcessed: TypedContractEvent<
      DepositProcessedEvent.InputTuple,
      DepositProcessedEvent.OutputTuple,
      DepositProcessedEvent.OutputObject
    >;

    "DepositQueued(address,uint256,uint256)": TypedContractEvent<
      DepositQueuedEvent.InputTuple,
      DepositQueuedEvent.OutputTuple,
      DepositQueuedEvent.OutputObject
    >;
    DepositQueued: TypedContractEvent<
      DepositQueuedEvent.InputTuple,
      DepositQueuedEvent.OutputTuple,
      DepositQueuedEvent.OutputObject
    >;

    "ExecutorChanged(address)": TypedContractEvent<
      ExecutorChangedEvent.InputTuple,
      ExecutorChangedEvent.OutputTuple,
      ExecutorChangedEvent.OutputObject
    >;
    ExecutorChanged: TypedContractEvent<
      ExecutorChangedEvent.InputTuple,
      ExecutorChangedEvent.OutputTuple,
      ExecutorChangedEvent.OutputObject
    >;

    "FundsAddedFromExecutor(address,address,uint256,uint256)": TypedContractEvent<
      FundsAddedFromExecutorEvent.InputTuple,
      FundsAddedFromExecutorEvent.OutputTuple,
      FundsAddedFromExecutorEvent.OutputObject
    >;
    FundsAddedFromExecutor: TypedContractEvent<
      FundsAddedFromExecutorEvent.InputTuple,
      FundsAddedFromExecutorEvent.OutputTuple,
      FundsAddedFromExecutorEvent.OutputObject
    >;

    "FundsRemovedFromPool(address,address,uint256,uint256)": TypedContractEvent<
      FundsRemovedFromPoolEvent.InputTuple,
      FundsRemovedFromPoolEvent.OutputTuple,
      FundsRemovedFromPoolEvent.OutputObject
    >;
    FundsRemovedFromPool: TypedContractEvent<
      FundsRemovedFromPoolEvent.InputTuple,
      FundsRemovedFromPoolEvent.OutputTuple,
      FundsRemovedFromPoolEvent.OutputObject
    >;

    "LicensingFeeCollected(address,uint256,uint256)": TypedContractEvent<
      LicensingFeeCollectedEvent.InputTuple,
      LicensingFeeCollectedEvent.OutputTuple,
      LicensingFeeCollectedEvent.OutputObject
    >;
    LicensingFeeCollected: TypedContractEvent<
      LicensingFeeCollectedEvent.InputTuple,
      LicensingFeeCollectedEvent.OutputTuple,
      LicensingFeeCollectedEvent.OutputObject
    >;

    "LicensingFeeRateSet(uint256)": TypedContractEvent<
      LicensingFeeRateSetEvent.InputTuple,
      LicensingFeeRateSetEvent.OutputTuple,
      LicensingFeeRateSetEvent.OutputObject
    >;
    LicensingFeeRateSet: TypedContractEvent<
      LicensingFeeRateSetEvent.InputTuple,
      LicensingFeeRateSetEvent.OutputTuple,
      LicensingFeeRateSetEvent.OutputObject
    >;

    "OffChainDepositProcessed(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      OffChainDepositProcessedEvent.InputTuple,
      OffChainDepositProcessedEvent.OutputTuple,
      OffChainDepositProcessedEvent.OutputObject
    >;
    OffChainDepositProcessed: TypedContractEvent<
      OffChainDepositProcessedEvent.InputTuple,
      OffChainDepositProcessedEvent.OutputTuple,
      OffChainDepositProcessedEvent.OutputObject
    >;

    "OffChainWithdrawalProcessed(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      OffChainWithdrawalProcessedEvent.InputTuple,
      OffChainWithdrawalProcessedEvent.OutputTuple,
      OffChainWithdrawalProcessedEvent.OutputObject
    >;
    OffChainWithdrawalProcessed: TypedContractEvent<
      OffChainWithdrawalProcessedEvent.InputTuple,
      OffChainWithdrawalProcessedEvent.OutputTuple,
      OffChainWithdrawalProcessedEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "OwnerNominated(address)": TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
    OwnerNominated: TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;

    "WithdrawQueued(address,address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawQueuedEvent.InputTuple,
      WithdrawQueuedEvent.OutputTuple,
      WithdrawQueuedEvent.OutputObject
    >;
    WithdrawQueued: TypedContractEvent<
      WithdrawQueuedEvent.InputTuple,
      WithdrawQueuedEvent.OutputTuple,
      WithdrawQueuedEvent.OutputObject
    >;

    "WithdrawalProcessed(address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawalProcessedEvent.InputTuple,
      WithdrawalProcessedEvent.OutputTuple,
      WithdrawalProcessedEvent.OutputObject
    >;
    WithdrawalProcessed: TypedContractEvent<
      WithdrawalProcessedEvent.InputTuple,
      WithdrawalProcessedEvent.OutputTuple,
      WithdrawalProcessedEvent.OutputObject
    >;
  };
}
