/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface WhitelistGateKeeperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "addToTransferBlacklist"
      | "canDeposit"
      | "canTransferRepositoryToken"
      | "controllers"
      | "depositWhitelistEnabled"
      | "isController"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "owner"
      | "removeFromTransferBlacklist"
      | "setDepositWhitelistEnabled"
      | "setIsController"
      | "setUserCanDeposit"
      | "unsetUserCanDeposit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ControllerSet"
      | "DepositWhitelistEnabled"
      | "OwnerChanged"
      | "OwnerNominated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToTransferBlacklist",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransferRepositoryToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWhitelistEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromTransferBlacklist",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositWhitelistEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsController",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserCanDeposit",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetUserCanDeposit",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToTransferBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canTransferRepositoryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWhitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromTransferBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositWhitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserCanDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetUserCanDeposit",
    data: BytesLike
  ): Result;
}

export namespace ControllerSetEvent {
  export type InputTuple = [controller: AddressLike, isController: boolean];
  export type OutputTuple = [controller: string, isController: boolean];
  export interface OutputObject {
    controller: string;
    isController: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositWhitelistEnabledEvent {
  export type InputTuple = [flag: boolean];
  export type OutputTuple = [flag: boolean];
  export interface OutputObject {
    flag: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerNominatedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WhitelistGateKeeper extends BaseContract {
  connect(runner?: ContractRunner | null): WhitelistGateKeeper;
  waitForDeployment(): Promise<this>;

  interface: WhitelistGateKeeperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addToTransferBlacklist: TypedContractMethod<
    [users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  canDeposit: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  canTransferRepositoryToken: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  controllers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  depositWhitelistEnabled: TypedContractMethod<[], [boolean], "view">;

  isController: TypedContractMethod<
    [_controller: AddressLike],
    [boolean],
    "view"
  >;

  nominateNewOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeFromTransferBlacklist: TypedContractMethod<
    [users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setDepositWhitelistEnabled: TypedContractMethod<
    [depositWhitelistEnabled_: boolean],
    [void],
    "nonpayable"
  >;

  setIsController: TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;

  setUserCanDeposit: TypedContractMethod<
    [users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  unsetUserCanDeposit: TypedContractMethod<
    [users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToTransferBlacklist"
  ): TypedContractMethod<[users: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "canDeposit"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canTransferRepositoryToken"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "controllers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "depositWhitelistEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isController"
  ): TypedContractMethod<[_controller: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nominateNewOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFromTransferBlacklist"
  ): TypedContractMethod<[users: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDepositWhitelistEnabled"
  ): TypedContractMethod<
    [depositWhitelistEnabled_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsController"
  ): TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUserCanDeposit"
  ): TypedContractMethod<[users: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsetUserCanDeposit"
  ): TypedContractMethod<[users: AddressLike[]], [void], "nonpayable">;

  getEvent(
    key: "ControllerSet"
  ): TypedContractEvent<
    ControllerSetEvent.InputTuple,
    ControllerSetEvent.OutputTuple,
    ControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "DepositWhitelistEnabled"
  ): TypedContractEvent<
    DepositWhitelistEnabledEvent.InputTuple,
    DepositWhitelistEnabledEvent.OutputTuple,
    DepositWhitelistEnabledEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerNominated"
  ): TypedContractEvent<
    OwnerNominatedEvent.InputTuple,
    OwnerNominatedEvent.OutputTuple,
    OwnerNominatedEvent.OutputObject
  >;

  filters: {
    "ControllerSet(address,bool)": TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;
    ControllerSet: TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;

    "DepositWhitelistEnabled(bool)": TypedContractEvent<
      DepositWhitelistEnabledEvent.InputTuple,
      DepositWhitelistEnabledEvent.OutputTuple,
      DepositWhitelistEnabledEvent.OutputObject
    >;
    DepositWhitelistEnabled: TypedContractEvent<
      DepositWhitelistEnabledEvent.InputTuple,
      DepositWhitelistEnabledEvent.OutputTuple,
      DepositWhitelistEnabledEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "OwnerNominated(address)": TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
    OwnerNominated: TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
  };
}
