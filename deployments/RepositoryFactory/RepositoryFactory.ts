/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RepositoryFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "collectFeeFromParticularRepositories"
      | "collectFeeFromRepository"
      | "collectFeesFromRepositories"
      | "controllers"
      | "createRepository"
      | "deployedRepositories"
      | "feeRecipient"
      | "isController"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "owner"
      | "removeRepository"
      | "setFeeRecipient"
      | "setIsController"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ControllerSet"
      | "FeeRecipientSet"
      | "OwnerChanged"
      | "OwnerNominated"
      | "RepositoryCreated"
      | "RepositoryRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFeeFromParticularRepositories",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFeeFromRepository",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFeesFromRepositories",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRepository",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedRepositories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeRepository",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsController",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFeeFromParticularRepositories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFeeFromRepository",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFeesFromRepositories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRepository",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedRepositories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRepository",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsController",
    data: BytesLike
  ): Result;
}

export namespace ControllerSetEvent {
  export type InputTuple = [controller: AddressLike, isController: boolean];
  export type OutputTuple = [controller: string, isController: boolean];
  export interface OutputObject {
    controller: string;
    isController: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientSetEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerNominatedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepositoryCreatedEvent {
  export type InputTuple = [
    repository: AddressLike,
    owner: AddressLike,
    index: BigNumberish
  ];
  export type OutputTuple = [repository: string, owner: string, index: bigint];
  export interface OutputObject {
    repository: string;
    owner: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepositoryRemovedEvent {
  export type InputTuple = [
    repository: AddressLike,
    index: BigNumberish,
    newRepositoryAtIndex: AddressLike
  ];
  export type OutputTuple = [
    repository: string,
    index: bigint,
    newRepositoryAtIndex: string
  ];
  export interface OutputObject {
    repository: string;
    index: bigint;
    newRepositoryAtIndex: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RepositoryFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RepositoryFactory;
  waitForDeployment(): Promise<this>;

  interface: RepositoryFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  collectFeeFromParticularRepositories: TypedContractMethod<
    [indexes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  collectFeeFromRepository: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectFeesFromRepositories: TypedContractMethod<
    [index: BigNumberish, limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  controllers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createRepository: TypedContractMethod<
    [
      _owner: AddressLike,
      _controller: AddressLike,
      _executor: AddressLike,
      _bookKeeper: AddressLike,
      _gateKeeper: AddressLike,
      _depositToken: AddressLike,
      _totalValueCap: BigNumberish,
      _licensingFeeRate: BigNumberish,
      _repositoryTokenName: string,
      _repositoryTokenSymbol: string
    ],
    [string],
    "nonpayable"
  >;

  deployedRepositories: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string, string, string] & {
        repository: string;
        owner: string;
        controller: string;
        executor: string;
        bookKeeper: string;
        gateKeeper: string;
        repositoryToken: string;
        depositToken: string;
      }
    ],
    "view"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  isController: TypedContractMethod<
    [_controller: AddressLike],
    [boolean],
    "view"
  >;

  nominateNewOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeRepository: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [_feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setIsController: TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectFeeFromParticularRepositories"
  ): TypedContractMethod<[indexes: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectFeeFromRepository"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectFeesFromRepositories"
  ): TypedContractMethod<
    [index: BigNumberish, limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "controllers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createRepository"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _controller: AddressLike,
      _executor: AddressLike,
      _bookKeeper: AddressLike,
      _gateKeeper: AddressLike,
      _depositToken: AddressLike,
      _totalValueCap: BigNumberish,
      _licensingFeeRate: BigNumberish,
      _repositoryTokenName: string,
      _repositoryTokenSymbol: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedRepositories"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string, string, string] & {
        repository: string;
        owner: string;
        controller: string;
        executor: string;
        bookKeeper: string;
        gateKeeper: string;
        repositoryToken: string;
        depositToken: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isController"
  ): TypedContractMethod<[_controller: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nominateNewOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeRepository"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[_feeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsController"
  ): TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ControllerSet"
  ): TypedContractEvent<
    ControllerSetEvent.InputTuple,
    ControllerSetEvent.OutputTuple,
    ControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientSet"
  ): TypedContractEvent<
    FeeRecipientSetEvent.InputTuple,
    FeeRecipientSetEvent.OutputTuple,
    FeeRecipientSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerNominated"
  ): TypedContractEvent<
    OwnerNominatedEvent.InputTuple,
    OwnerNominatedEvent.OutputTuple,
    OwnerNominatedEvent.OutputObject
  >;
  getEvent(
    key: "RepositoryCreated"
  ): TypedContractEvent<
    RepositoryCreatedEvent.InputTuple,
    RepositoryCreatedEvent.OutputTuple,
    RepositoryCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RepositoryRemoved"
  ): TypedContractEvent<
    RepositoryRemovedEvent.InputTuple,
    RepositoryRemovedEvent.OutputTuple,
    RepositoryRemovedEvent.OutputObject
  >;

  filters: {
    "ControllerSet(address,bool)": TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;
    ControllerSet: TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;

    "FeeRecipientSet(address)": TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;
    FeeRecipientSet: TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "OwnerNominated(address)": TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
    OwnerNominated: TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;

    "RepositoryCreated(address,address,uint256)": TypedContractEvent<
      RepositoryCreatedEvent.InputTuple,
      RepositoryCreatedEvent.OutputTuple,
      RepositoryCreatedEvent.OutputObject
    >;
    RepositoryCreated: TypedContractEvent<
      RepositoryCreatedEvent.InputTuple,
      RepositoryCreatedEvent.OutputTuple,
      RepositoryCreatedEvent.OutputObject
    >;

    "RepositoryRemoved(address,uint256,address)": TypedContractEvent<
      RepositoryRemovedEvent.InputTuple,
      RepositoryRemovedEvent.OutputTuple,
      RepositoryRemovedEvent.OutputObject
    >;
    RepositoryRemoved: TypedContractEvent<
      RepositoryRemovedEvent.InputTuple,
      RepositoryRemovedEvent.OutputTuple,
      RepositoryRemovedEvent.OutputObject
    >;
  };
}
