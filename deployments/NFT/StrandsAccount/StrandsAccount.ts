/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStrandsAccount {
  export type AccountDetailsStruct = {
    clearingFirm: string;
    accountNumber: string;
    accountValue: BigNumberish;
    initialMargin: BigNumberish;
    maintenanceMargin: BigNumberish;
    excessEquity: BigNumberish;
    statementTimestamp: BigNumberish;
    approvedTraders: AddressLike[];
  };

  export type AccountDetailsStructOutput = [
    clearingFirm: string,
    accountNumber: string,
    accountValue: bigint,
    initialMargin: bigint,
    maintenanceMargin: bigint,
    excessEquity: bigint,
    statementTimestamp: bigint,
    approvedTraders: string[]
  ] & {
    clearingFirm: string;
    accountNumber: string;
    accountValue: bigint;
    initialMargin: bigint;
    maintenanceMargin: bigint;
    excessEquity: bigint;
    statementTimestamp: bigint;
    approvedTraders: string[];
  };
}

export declare namespace IStrandsPosition {
  export type TradeDetailsStruct = {
    tag50: string;
    tradeId: string;
    isLong: boolean;
    quantity: BigNumberish;
    purchasePrice: BigNumberish;
    executionTime: BigNumberish;
  };

  export type TradeDetailsStructOutput = [
    tag50: string,
    tradeId: string,
    isLong: boolean,
    quantity: bigint,
    purchasePrice: bigint,
    executionTime: bigint
  ] & {
    tag50: string;
    tradeId: string;
    isLong: boolean;
    quantity: bigint;
    purchasePrice: bigint;
    executionTime: bigint;
  };

  export type AltSymbolInfoStruct = { source: string; altSymbol: string };

  export type AltSymbolInfoStructOutput = [
    source: string,
    altSymbol: string
  ] & { source: string; altSymbol: string };

  export type PositionDetailsStruct = {
    symbol: string;
    exchange: string;
    clearingFirm: string;
    accountNumber: string;
    trades: IStrandsPosition.TradeDetailsStruct[];
    lastTradingDate: BigNumberish;
    expired: boolean;
    altSymbolInfos: IStrandsPosition.AltSymbolInfoStruct[];
    tokenId: BigNumberish;
  };

  export type PositionDetailsStructOutput = [
    symbol: string,
    exchange: string,
    clearingFirm: string,
    accountNumber: string,
    trades: IStrandsPosition.TradeDetailsStructOutput[],
    lastTradingDate: bigint,
    expired: boolean,
    altSymbolInfos: IStrandsPosition.AltSymbolInfoStructOutput[],
    tokenId: bigint
  ] & {
    symbol: string;
    exchange: string;
    clearingFirm: string;
    accountNumber: string;
    trades: IStrandsPosition.TradeDetailsStructOutput[];
    lastTradingDate: bigint;
    expired: boolean;
    altSymbolInfos: IStrandsPosition.AltSymbolInfoStructOutput[];
    tokenId: bigint;
  };
}

export interface StrandsAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "approve"
      | "balanceOf"
      | "controllers"
      | "deleteAccount"
      | "getAccountDetails"
      | "getApproved"
      | "getOwner"
      | "getOwnerAccounts"
      | "getPositionsByAccountId"
      | "getTokenId"
      | "isApprovedForAll"
      | "isController"
      | "mint"
      | "mintCounter"
      | "name"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "owner"
      | "ownerOf"
      | "positionNFT"
      | "removeApprovedTrader"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setApprovedTraders"
      | "setIsController"
      | "setPositionNFT"
      | "setTokenURI"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferAccount"
      | "transferFrom"
      | "updateValues"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "ControllerSet"
      | "OwnerChanged"
      | "OwnerNominated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAccount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerAccounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsByAccountId",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      AddressLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeApprovedTrader",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedTraders",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsController",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAccount",
    values: [string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValues",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsByAccountId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeApprovedTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValues",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    id: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, id: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControllerSetEvent {
  export type InputTuple = [controller: AddressLike, isController: boolean];
  export type OutputTuple = [controller: string, isController: boolean];
  export interface OutputObject {
    controller: string;
    isController: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerNominatedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, id: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrandsAccount extends BaseContract {
  connect(runner?: ContractRunner | null): StrandsAccount;
  waitForDeployment(): Promise<this>;

  interface: StrandsAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  approve: TypedContractMethod<
    [spender: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  controllers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  deleteAccount: TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string],
    [void],
    "nonpayable"
  >;

  getAccountDetails: TypedContractMethod<
    [accountTokenId_: BigNumberish],
    [IStrandsAccount.AccountDetailsStructOutput],
    "view"
  >;

  getApproved: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getOwner: TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string],
    [string],
    "view"
  >;

  getOwnerAccounts: TypedContractMethod<
    [target: AddressLike],
    [IStrandsAccount.AccountDetailsStructOutput[]],
    "view"
  >;

  getPositionsByAccountId: TypedContractMethod<
    [tokenId_: BigNumberish, includeExpiredPosition_: boolean],
    [IStrandsPosition.PositionDetailsStructOutput[]],
    "view"
  >;

  getTokenId: TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isController: TypedContractMethod<
    [_controller: AddressLike],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [
      to: AddressLike,
      clearingFirm_: string,
      accountNumber_: string,
      accountValue_: BigNumberish,
      initialMargin_: BigNumberish,
      maintenanceMargin_: BigNumberish,
      excessEquity_: BigNumberish,
      timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mintCounter: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nominateNewOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[id: BigNumberish], [string], "view">;

  positionNFT: TypedContractMethod<[], [string], "view">;

  removeApprovedTrader: TypedContractMethod<
    [tokenId_: BigNumberish, trader_: AddressLike],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setApprovedTraders: TypedContractMethod<
    [tokenId_: BigNumberish, traders_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setIsController: TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;

  setPositionNFT: TypedContractMethod<
    [positionNFT_: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenURI: TypedContractMethod<
    [tokenId: BigNumberish, _tURI: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferAccount: TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string, to_: AddressLike],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateValues: TypedContractMethod<
    [
      clearingFirm_: string,
      accountNumber_: string,
      accountValue_: BigNumberish,
      initialMargin_: BigNumberish,
      maintenanceMargin_: BigNumberish,
      excessEquity_: BigNumberish,
      timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "controllers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deleteAccount"
  ): TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccountDetails"
  ): TypedContractMethod<
    [accountTokenId_: BigNumberish],
    [IStrandsAccount.AccountDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerAccounts"
  ): TypedContractMethod<
    [target: AddressLike],
    [IStrandsAccount.AccountDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionsByAccountId"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, includeExpiredPosition_: boolean],
    [IStrandsPosition.PositionDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenId"
  ): TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isController"
  ): TypedContractMethod<[_controller: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      to: AddressLike,
      clearingFirm_: string,
      accountNumber_: string,
      accountValue_: BigNumberish,
      initialMargin_: BigNumberish,
      maintenanceMargin_: BigNumberish,
      excessEquity_: BigNumberish,
      timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nominateNewOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "positionNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeApprovedTrader"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, trader_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovedTraders"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, traders_: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsController"
  ): TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPositionNFT"
  ): TypedContractMethod<[positionNFT_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenURI"
  ): TypedContractMethod<
    [tokenId: BigNumberish, _tURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferAccount"
  ): TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string, to_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateValues"
  ): TypedContractMethod<
    [
      clearingFirm_: string,
      accountNumber_: string,
      accountValue_: BigNumberish,
      initialMargin_: BigNumberish,
      maintenanceMargin_: BigNumberish,
      excessEquity_: BigNumberish,
      timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ControllerSet"
  ): TypedContractEvent<
    ControllerSetEvent.InputTuple,
    ControllerSetEvent.OutputTuple,
    ControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerNominated"
  ): TypedContractEvent<
    OwnerNominatedEvent.InputTuple,
    OwnerNominatedEvent.OutputTuple,
    OwnerNominatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ControllerSet(address,bool)": TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;
    ControllerSet: TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "OwnerNominated(address)": TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
    OwnerNominated: TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
