/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStrandsPosition {
  export type TradeDetailsStruct = {
    tag50: string;
    tradeId: string;
    isLong: boolean;
    quantity: BigNumberish;
    purchasePrice: BigNumberish;
    executionTime: BigNumberish;
  };

  export type TradeDetailsStructOutput = [
    tag50: string,
    tradeId: string,
    isLong: boolean,
    quantity: bigint,
    purchasePrice: bigint,
    executionTime: bigint
  ] & {
    tag50: string;
    tradeId: string;
    isLong: boolean;
    quantity: bigint;
    purchasePrice: bigint;
    executionTime: bigint;
  };

  export type AltSymbolInfoStruct = { source: string; altSymbol: string };

  export type AltSymbolInfoStructOutput = [
    source: string,
    altSymbol: string
  ] & { source: string; altSymbol: string };

  export type PositionDetailsStruct = {
    symbol: string;
    exchange: string;
    clearingFirm: string;
    accountNumber: string;
    trades: IStrandsPosition.TradeDetailsStruct[];
    lastTradingDate: BigNumberish;
    expired: boolean;
    altSymbolInfos: IStrandsPosition.AltSymbolInfoStruct[];
    tokenId: BigNumberish;
  };

  export type PositionDetailsStructOutput = [
    symbol: string,
    exchange: string,
    clearingFirm: string,
    accountNumber: string,
    trades: IStrandsPosition.TradeDetailsStructOutput[],
    lastTradingDate: bigint,
    expired: boolean,
    altSymbolInfos: IStrandsPosition.AltSymbolInfoStructOutput[],
    tokenId: bigint
  ] & {
    symbol: string;
    exchange: string;
    clearingFirm: string;
    accountNumber: string;
    trades: IStrandsPosition.TradeDetailsStructOutput[];
    lastTradingDate: bigint;
    expired: boolean;
    altSymbolInfos: IStrandsPosition.AltSymbolInfoStructOutput[];
    tokenId: bigint;
  };
}

export interface StrandsPositionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "addTrade"
      | "approve"
      | "balanceOf"
      | "controllers"
      | "deleteTrade"
      | "expirePosition"
      | "expirePositions"
      | "getAllPositions"
      | "getApproved"
      | "getOwnerPositions"
      | "getOwnerTokenIds"
      | "getPositionDetails"
      | "getPositionsByAccount"
      | "getTokenId"
      | "getTradesBetween"
      | "isApprovedForAll"
      | "isController"
      | "mint"
      | "mintCounter"
      | "name"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "owner"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setIsController"
      | "setTokenURI"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "tradeIdExists"
      | "transferFrom"
      | "updateSymbol"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "ControllerSet"
      | "OwnerChanged"
      | "OwnerNominated"
      | "PositionCreated"
      | "PositionExpired"
      | "TradeAdded"
      | "TradeDeleted"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTrade",
    values: [
      AddressLike,
      string,
      string,
      string,
      string,
      BigNumberish,
      IStrandsPosition.TradeDetailsStruct,
      IStrandsPosition.AltSymbolInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTrade",
    values: [AddressLike, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "expirePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expirePositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPositions",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerTokenIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsByAccount",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradesBetween",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      AddressLike,
      string,
      string,
      string,
      string,
      BigNumberish,
      IStrandsPosition.TradeDetailsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsController",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeIdExists",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSymbol",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradesBetween",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeIdExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSymbol",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    id: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, id: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControllerSetEvent {
  export type InputTuple = [controller: AddressLike, isController: boolean];
  export type OutputTuple = [controller: string, isController: boolean];
  export interface OutputObject {
    controller: string;
    isController: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerNominatedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    symbol: string,
    exchange: string,
    clearingFirm: string,
    accountNumber: string,
    lastTradingDate: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    owner: string,
    symbol: string,
    exchange: string,
    clearingFirm: string,
    accountNumber: string,
    lastTradingDate: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    symbol: string;
    exchange: string;
    clearingFirm: string;
    accountNumber: string;
    lastTradingDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionExpiredEvent {
  export type InputTuple = [
    tokenOwner: AddressLike,
    tokenId: BigNumberish,
    totalQuantity: BigNumberish,
    isLong: boolean
  ];
  export type OutputTuple = [
    tokenOwner: string,
    tokenId: bigint,
    totalQuantity: bigint,
    isLong: boolean
  ];
  export interface OutputObject {
    tokenOwner: string;
    tokenId: bigint;
    totalQuantity: bigint;
    isLong: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeAddedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    tradeId: string,
    tag50: string,
    quantity: BigNumberish,
    price: BigNumberish,
    executionTime: BigNumberish,
    isLong: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    tradeId: string,
    tag50: string,
    quantity: bigint,
    price: bigint,
    executionTime: bigint,
    isLong: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    tradeId: string;
    tag50: string;
    quantity: bigint;
    price: bigint;
    executionTime: bigint;
    isLong: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeDeletedEvent {
  export type InputTuple = [tokenId: BigNumberish, tradeId: string];
  export type OutputTuple = [tokenId: bigint, tradeId: string];
  export interface OutputObject {
    tokenId: bigint;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, id: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrandsPosition extends BaseContract {
  connect(runner?: ContractRunner | null): StrandsPosition;
  waitForDeployment(): Promise<this>;

  interface: StrandsPositionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addTrade: TypedContractMethod<
    [
      owner_: AddressLike,
      symbol_: string,
      exchange_: string,
      clearingFirm_: string,
      accountNumber_: string,
      lastTradingDate_: BigNumberish,
      tradeDetails_: IStrandsPosition.TradeDetailsStruct,
      altSymbolInfo_: IStrandsPosition.AltSymbolInfoStruct[]
    ],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  controllers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  deleteTrade: TypedContractMethod<
    [
      owner_: AddressLike,
      tradeId_: string,
      symbol_: string,
      clearingFirm_: string,
      accountNumber_: string
    ],
    [void],
    "nonpayable"
  >;

  expirePosition: TypedContractMethod<
    [tokenId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  expirePositions: TypedContractMethod<[], [void], "nonpayable">;

  getAllPositions: TypedContractMethod<
    [includeExpiredPosition_: boolean],
    [IStrandsPosition.PositionDetailsStructOutput[]],
    "view"
  >;

  getApproved: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getOwnerPositions: TypedContractMethod<
    [target: AddressLike],
    [IStrandsPosition.PositionDetailsStructOutput[]],
    "view"
  >;

  getOwnerTokenIds: TypedContractMethod<
    [target: AddressLike],
    [bigint[]],
    "view"
  >;

  getPositionDetails: TypedContractMethod<
    [tokenId: BigNumberish],
    [IStrandsPosition.PositionDetailsStructOutput],
    "view"
  >;

  getPositionsByAccount: TypedContractMethod<
    [
      clearingFirm_: string,
      accountNumber_: string,
      includeExpiredPosition_: boolean
    ],
    [IStrandsPosition.PositionDetailsStructOutput[]],
    "view"
  >;

  getTokenId: TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string, symbol_: string],
    [bigint],
    "view"
  >;

  getTradesBetween: TypedContractMethod<
    [fromTime: BigNumberish, toTime: BigNumberish],
    [IStrandsPosition.TradeDetailsStructOutput[]],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isController: TypedContractMethod<
    [_controller: AddressLike],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [
      to: AddressLike,
      symbol_: string,
      exchange_: string,
      clearingFirm_: string,
      accountNumber_: string,
      lastTradingDate_: BigNumberish,
      tradeDetails_: IStrandsPosition.TradeDetailsStruct
    ],
    [bigint],
    "nonpayable"
  >;

  mintCounter: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nominateNewOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[id: BigNumberish], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setIsController: TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;

  setTokenURI: TypedContractMethod<
    [tokenId: BigNumberish, _tURI: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  tradeIdExists: TypedContractMethod<
    [
      symbol_: string,
      clearingFirm_: string,
      accountNumber_: string,
      tradeId_: string
    ],
    [[boolean, boolean, bigint, string]],
    "view"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSymbol: TypedContractMethod<
    [tokenId: BigNumberish, newSymbol: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addTrade"
  ): TypedContractMethod<
    [
      owner_: AddressLike,
      symbol_: string,
      exchange_: string,
      clearingFirm_: string,
      accountNumber_: string,
      lastTradingDate_: BigNumberish,
      tradeDetails_: IStrandsPosition.TradeDetailsStruct,
      altSymbolInfo_: IStrandsPosition.AltSymbolInfoStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "controllers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deleteTrade"
  ): TypedContractMethod<
    [
      owner_: AddressLike,
      tradeId_: string,
      symbol_: string,
      clearingFirm_: string,
      accountNumber_: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expirePosition"
  ): TypedContractMethod<[tokenId_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expirePositions"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllPositions"
  ): TypedContractMethod<
    [includeExpiredPosition_: boolean],
    [IStrandsPosition.PositionDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getOwnerPositions"
  ): TypedContractMethod<
    [target: AddressLike],
    [IStrandsPosition.PositionDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerTokenIds"
  ): TypedContractMethod<[target: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPositionDetails"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [IStrandsPosition.PositionDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionsByAccount"
  ): TypedContractMethod<
    [
      clearingFirm_: string,
      accountNumber_: string,
      includeExpiredPosition_: boolean
    ],
    [IStrandsPosition.PositionDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenId"
  ): TypedContractMethod<
    [clearingFirm_: string, accountNumber_: string, symbol_: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradesBetween"
  ): TypedContractMethod<
    [fromTime: BigNumberish, toTime: BigNumberish],
    [IStrandsPosition.TradeDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isController"
  ): TypedContractMethod<[_controller: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      to: AddressLike,
      symbol_: string,
      exchange_: string,
      clearingFirm_: string,
      accountNumber_: string,
      lastTradingDate_: BigNumberish,
      tradeDetails_: IStrandsPosition.TradeDetailsStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nominateNewOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsController"
  ): TypedContractMethod<
    [_controller: AddressLike, isController_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenURI"
  ): TypedContractMethod<
    [tokenId: BigNumberish, _tURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tradeIdExists"
  ): TypedContractMethod<
    [
      symbol_: string,
      clearingFirm_: string,
      accountNumber_: string,
      tradeId_: string
    ],
    [[boolean, boolean, bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSymbol"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newSymbol: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ControllerSet"
  ): TypedContractEvent<
    ControllerSetEvent.InputTuple,
    ControllerSetEvent.OutputTuple,
    ControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerNominated"
  ): TypedContractEvent<
    OwnerNominatedEvent.InputTuple,
    OwnerNominatedEvent.OutputTuple,
    OwnerNominatedEvent.OutputObject
  >;
  getEvent(
    key: "PositionCreated"
  ): TypedContractEvent<
    PositionCreatedEvent.InputTuple,
    PositionCreatedEvent.OutputTuple,
    PositionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PositionExpired"
  ): TypedContractEvent<
    PositionExpiredEvent.InputTuple,
    PositionExpiredEvent.OutputTuple,
    PositionExpiredEvent.OutputObject
  >;
  getEvent(
    key: "TradeAdded"
  ): TypedContractEvent<
    TradeAddedEvent.InputTuple,
    TradeAddedEvent.OutputTuple,
    TradeAddedEvent.OutputObject
  >;
  getEvent(
    key: "TradeDeleted"
  ): TypedContractEvent<
    TradeDeletedEvent.InputTuple,
    TradeDeletedEvent.OutputTuple,
    TradeDeletedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ControllerSet(address,bool)": TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;
    ControllerSet: TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "OwnerNominated(address)": TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
    OwnerNominated: TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;

    "PositionCreated(uint256,address,string,string,string,string,uint256)": TypedContractEvent<
      PositionCreatedEvent.InputTuple,
      PositionCreatedEvent.OutputTuple,
      PositionCreatedEvent.OutputObject
    >;
    PositionCreated: TypedContractEvent<
      PositionCreatedEvent.InputTuple,
      PositionCreatedEvent.OutputTuple,
      PositionCreatedEvent.OutputObject
    >;

    "PositionExpired(address,uint256,uint256,bool)": TypedContractEvent<
      PositionExpiredEvent.InputTuple,
      PositionExpiredEvent.OutputTuple,
      PositionExpiredEvent.OutputObject
    >;
    PositionExpired: TypedContractEvent<
      PositionExpiredEvent.InputTuple,
      PositionExpiredEvent.OutputTuple,
      PositionExpiredEvent.OutputObject
    >;

    "TradeAdded(uint256,string,string,uint256,uint256,uint256,bool)": TypedContractEvent<
      TradeAddedEvent.InputTuple,
      TradeAddedEvent.OutputTuple,
      TradeAddedEvent.OutputObject
    >;
    TradeAdded: TypedContractEvent<
      TradeAddedEvent.InputTuple,
      TradeAddedEvent.OutputTuple,
      TradeAddedEvent.OutputObject
    >;

    "TradeDeleted(uint256,string)": TypedContractEvent<
      TradeDeletedEvent.InputTuple,
      TradeDeletedEvent.OutputTuple,
      TradeDeletedEvent.OutputObject
    >;
    TradeDeleted: TypedContractEvent<
      TradeDeletedEvent.InputTuple,
      TradeDeletedEvent.OutputTuple,
      TradeDeletedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
